#####
#
#  Script uses a K Nearest Neighbor Classifier to predict a Finantial Rating Grade
#  Uses housingdata_train.arff ( file generated by preprocess from original MassHousingTrainData.csv) to train the classifier
#  For testing this script uses housingdata.arff - file generated by preprocess from original csv, provided by TA
#  Script generates false_predictions.txt with false data predictions
#
#  Usage: python prediction
#
####

import sys
import traceback
import os.path
import weka.core.jvm as jvm
from weka.core.converters import Loader
from weka.classifiers import Classifier, Evaluation
from weka.core.classes import Random

# function to translate the grade
def get_grade(grade):
    if (grade == 1.0):
        return "GOOD"
    else:
        return "BAD"

# function for data classification with KNN
def classify_data_knn(data_set, neighbors_number):
    # load ARFF data set
    loader = Loader(classname="weka.core.converters.ArffLoader")
    
	# delete before submittion
    data = loader.load_file(data_set)
    data.class_is_last()
    
	# !!!!delete before submittion
    # devide data set into 66% goes to training dataset and and 44% - to testing dataset 
    train, test = data.train_test_split(66.0, Random(1));

    # !!! uncomment this before submittion
    # training dataset uses housingdata.arff 
	#train = loader.load_file("housingdata_train.arff")
    #train.class_is_last()

    # !!! uncomment this before submittion
    # testing dataset uses dataset, provided by TA
    #test = loader.load_file(data_set)
    #test.class_is_last()
    
	# build KNN classifier
    classifier = Classifier(classname='weka.classifiers.lazy.IBk', options=["-K", str(neighbors_number)])
    classifier.build_classifier(train)

    # print false prediction to false_predictions.txt
    f = open('false_predictions.txt','w')
    for index, inst in enumerate(test):
        # predict the grade
        prediction = classifier.classify_instance(inst)

        # if a predicted value doesn't match an actual grade
        if (test.get_instance(index).values[72] != prediction):
            f.write(" rm_key: " + str(test.get_instance(index).values[0]) + 
		            " expected grade: " + get_grade(test.get_instance(index).values[72]) +
                    " predicted grade: " + get_grade(prediction) + '\n')
    f.close()

    # evaluate classifier	
    simple_evaluation(train, test, classifier)

# function to evaluate classifier and print some simple statistics
def simple_evaluation(train_data_set, test_data_set, classifier):
    evaluation = Evaluation(train_data_set)
    evaluation.test_model(classifier, test_data_set)
	# print statistics
    print(evaluation.summary())

# main function
def main():	
    try:
        jvm.start()
        # make sure file exists
		
        if not os.path.isfile("housingdata_train.arff"):
            print('File does not exist: housingdata.arff')
            print('Please create ARFF file running: python preprocess <original csv file path>')
            sys.exit(-1)

        # number of neighbors for KNN
        k = 2

        # classify data
        classify_data_knn("housingdata_train.arff", k)

    except Exception, e:
         print(traceback.format_exc())
    finally:
        jvm.stop()	

main()